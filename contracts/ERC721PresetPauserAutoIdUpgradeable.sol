// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *  - provides `nonReentrant` modifier that should be used for reentrancy protection
 *  when using `_safeMint()` (due to the latter's support for external callback functions;
 *  cf. https://www.paradigm.xyz/2021/08/the-dangers-of-surprising-code/)
 *  - first minted token has an id of 1, not 0
 *
 * NOTE: Contracts inheriting from this contract are responsible for adding their own
 * initializer method that uses the `initializer` modifier and calls this contract's 
 * `_initialize()` method.
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the pauser
 * role, as well as the default admin role, which will let it grant the pauser role
 * to other accounts.
 *
 * Adapted from OpenZeppelin's ERC721PresetMinterPauserAutoIdUpgradeable contract.
 */
abstract contract ERC721PresetPauserAutoIdUpgradeable is
  Initializable,
  ContextUpgradeable,
  AccessControlEnumerableUpgradeable,
  ReentrancyGuardUpgradeable,
  ERC721EnumerableUpgradeable,
  ERC721PausableUpgradeable
{
  function _initialize(
    string memory name,
    string memory symbol,
    string memory baseTokenURI
  ) internal {
    __ERC721PresetPauserAutoId_init(name, symbol, baseTokenURI);

    // Reserve token id 0 for special meaning. Minted token ids will begin at 1.
    _tokenIdTracker.increment();
  }

  using CountersUpgradeable for CountersUpgradeable.Counter;

  bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

  CountersUpgradeable.Counter internal _tokenIdTracker;

  string private _baseTokenURI;

  /**
   * @dev Grants `DEFAULT_ADMIN_ROLE` and `PAUSER_ROLE` to the
   * account that deploys the contract.
   *
   * Token URIs will be autogenerated based on `baseURI` and their token IDs.
   * See {ERC721-tokenURI}.
   */
  function __ERC721PresetPauserAutoId_init(
    string memory name,
    string memory symbol,
    string memory baseTokenURI
  ) internal initializer {
    __Context_init_unchained();
    __ERC165_init_unchained();
    __AccessControl_init_unchained();
    __AccessControlEnumerable_init_unchained();
    __ERC721_init_unchained(name, symbol);
    __ERC721Enumerable_init_unchained();
    __Pausable_init_unchained();
    __ERC721Pausable_init_unchained();
    __ERC721PresetPauserAutoId_init_unchained(baseTokenURI);
  }

  function __ERC721PresetPauserAutoId_init_unchained(string memory baseTokenURI)
    internal
    initializer
  {
    _baseTokenURI = baseTokenURI;

    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

    _setupRole(PAUSER_ROLE, _msgSender());
  }

  function _baseURI() internal view virtual override returns (string memory) {
    return _baseTokenURI;
  }

  /**
   * @dev Pauses all token transfers.
   *
   * See {ERC721Pausable} and {Pausable-_pause}.
   *
   * Requirements:
   *
   * - the caller must have the `PAUSER_ROLE`.
   */
  function pause() public virtual {
    require(
      hasRole(PAUSER_ROLE, _msgSender()),
      "ERC721PresetPauserAutoId: must have pauser role to pause"
    );
    _pause();
  }

  /**
   * @dev Unpauses all token transfers.
   *
   * See {ERC721Pausable} and {Pausable-_unpause}.
   *
   * Requirements:
   *
   * - the caller must have the `PAUSER_ROLE`.
   */
  function unpause() public virtual {
    require(
      hasRole(PAUSER_ROLE, _msgSender()),
      "ERC721PresetPauserAutoId: must have pauser role to unpause"
    );
    _unpause();
  }

  function _beforeTokenTransfer(
    address from,
    address to,
    uint256 tokenId
  )
    internal
    virtual
    override(ERC721EnumerableUpgradeable, ERC721PausableUpgradeable)
  {
    super._beforeTokenTransfer(from, to, tokenId);
  }

  /**
   * @dev See {IERC165-supportsInterface}.
   */
  function supportsInterface(bytes4 interfaceId)
    public
    view
    virtual
    override(
      AccessControlEnumerableUpgradeable,
      ERC721Upgradeable,
      ERC721EnumerableUpgradeable
    )
    returns (bool)
  {
    return super.supportsInterface(interfaceId);
  }

  uint256[48] private __gap;
}
